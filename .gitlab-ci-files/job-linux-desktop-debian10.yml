.factorize_debian10: &docker_image_platform_and_runner_tag
  tags: [ "docker" ]
  image: gitlab.linphone.org:4567/bc/public/linphone-sdk/bc-dev-debian10:$DEBIAN_10_IMAGE_VERSION


job-debian10-ninja-gcc:
  except:
    refs:
      - schedules
  variables:
    CMAKE_GENERATOR: Ninja
    CMAKE_OPTIONS: -DENABLE_PQCRYPTO=ON
    CC: gcc
    CXX: g++
  extends: .job-linux-desktop
  <<: *docker_image_platform_and_runner_tag

#################################################
#           Nightly
#################################################

job-debian10-makefile-gcc:
  only:
    variables:
      - $NIGHTLY_MASTER
  variables:
    CMAKE_GENERATOR: Unix Makefiles
    CMAKE_OPTIONS: -DENABLE_PQCRYPTO=ON
    CC: gcc
    CXX: g++
    ADDITIONAL_BUILD_OPTIONS: -j$MAKEFILE_JOBS
  extends: .job-linux-desktop
  <<: *docker_image_platform_and_runner_tag


job-debian10-ninja-gcc-novideo:
  only:
    variables:
      - $NIGHTLY_MASTER
  variables:
    CMAKE_OPTIONS: -DENABLE_VIDEO=NO -DENABLE_PQCRYPTO=OFF
  extends: job-debian10-ninja-gcc


job-debian10-ninja-gcc-smallsdk:
  only:
    variables:
      - $NIGHTLY_MASTER
  variables:
    CMAKE_OPTIONS: -DENABLE_VIDEO=NO -DENABLE_ADVANCED_IM=NO -DENABLE_DB_STORAGE=NO -DENABLE_PQCRYPTO=OFF
    CMAKE_GENERATOR: Ninja
    CC: gcc
    CXX: g++
  extends: .job-linux-desktop
  <<: *docker_image_platform_and_runner_tag


job-debian10-ninja-clang:
  only:
    variables:
      - $NIGHTLY_MASTER
  variables:
    CMAKE_GENERATOR: Ninja
    CMAKE_OPTIONS: -DENABLE_DOC=ON -DENABLE_G729=ON -DENABLE_PQCRYPTO=ON -DENABLE_GPL_THIRD_PARTIES=ON
    CC: clang
    CXX: clang++
  extends: .job-linux-desktop
  <<: *docker_image_platform_and_runner_tag


job-debian10-ninja-clang-novideo:
  only:
    variables:
      - $NIGHTLY_MASTER
  variables:
    CMAKE_OPTIONS: -DENABLE_VIDEO=NO -DENABLE_PQCRYPTO=OFF
  extends: job-debian10-ninja-clang  

job-debian10-makefile-clang:
  only:
    variables:
      - $NIGHTLY_MASTER
      - $DEPLOY_LINUX
  variables:
    CMAKE_GENERATOR: Unix Makefiles
    CMAKE_OPTIONS: -DENABLE_PQCRYPTO=ON
    CC: clang
    CXX: clang++
    ADDITIONAL_BUILD_OPTIONS: -j$MAKEFILE_JOBS
  extends: .job-linux-desktop
  <<: *docker_image_platform_and_runner_tag
  
#################################################
# Package - Nightly
#################################################

job-debian10-makefile-gcc-package:
  stage: package
  tags: [ "docker-test-liblinphone" ]
  image: gitlab.linphone.org:4567/bc/public/linphone-sdk/bc-dev-debian10:$DEBIAN_10_IMAGE_VERSION
  dependencies: []
  only:
     variables:
       - $NIGHTLY_MASTER
       - $PACKAGE_LINUX
       - $DEPLOY_LINUX
  variables:
    CMAKE_OPTIONS: -DENABLE_APP_PACKAGING=YES -DLINPHONE_BUILDER_SIGNING_IDENTITY=$GPG_SIGNING_KEYID -DENABLE_G729=ON -DLINPHONE_SDK_MAKE_RELEASE_FILE_URL=$MAKE_RELEASE_FILE_URL/$LINUX_PLATFORM/$APP_FOLDER -DENABLE_PQCRYPTO=ON -DENABLE_GPL_THIRD_PARTIES=ON
    CMAKE_GENERATOR: Unix Makefiles
    CC: gcc
    CXX: g++
    APPIMAGETOOL_SIGN_PASSPHRASE: $GPG_SIGNING_PASS
  extends: .job-linux-desktop
  script:
    - echo "$GPG_SIGNING_PUB" > file.key && sed -i 's/\r /\n/g' file.key && chmod 600 file.key
    - gpg --import file.key
    - rm -f file.key
    - echo "$GPG_SIGNING_KEY" > file.key && sed -i 's/\r /\n/g' file.key && chmod 600 file.key
    - base64 -w 0 file.key | base64 -d | gpg --import --no-tty --batch --yes
    - rm -f file.key
    - cmake --version
    - export CC=$CC
    - export CXX=$CXX
    - mkdir -p build/OUTPUT
    - echo $CI_BUILD_TYPE
    - echo $CMAKE_GENERATOR
    - echo $DEFAULT_LINUX_CMAKE_OPTIONS
    - echo $CMAKE_SANITIZER_OPTIONS
    - cd build
    - cmake .. -G "$CMAKE_GENERATOR" -DCMAKE_VERBOSE_MAKEFILE=ON -DLINPHONESDK_PLATFORM=Desktop -DCMAKE_BUILD_TYPE=$CI_BUILD_TYPE $DEFAULT_LINUX_CMAKE_OPTIONS $CMAKE_OPTIONS $SCHEDULE_CMAKE_OPTIONS $CMAKE_SANITIZER_OPTIONS
    - cmake --build . --target install --config $CI_BUILD_TYPE $LBC_NODEBUG_OPTIONS
  artifacts:
    paths:
      - build/OUTPUT/*
    expire_in: 1 week

#################################################
# Deploy - Nightly
#################################################

job-debian10-makefile-gcc-deploy:
  stage: deploy
  tags: [ "docker" ]
  dependencies:
    - job-debian10-makefile-gcc-package
  only:
     variables:
       - $NIGHTLY_MASTER
       - $DEPLOY_LINUX
  script:
    - rsync -rlv --ignore-existing build/OUTPUT/Packages/*.AppImage $DEPLOY_SERVER:$UPLOAD_ROOT_PATH/$LINUX_PLATFORM/$APP_FOLDER
    - rsync -rlv build/OUTPUT/RELEASE $DEPLOY_SERVER:$UPLOAD_ROOT_PATH/$LINUX_PLATFORM
    - rsync -rlv build/OUTPUT/RELEASE $MAIN_DEPLOY_SERVER:$UPLOAD_ROOT_PATH/$LINUX_PLATFORM

job-debian10-makefile-gcc-plugins-deploy:
  stage: deploy
  tags: [ "deploy" ]
  needs:
    - job-debian10-makefile-gcc
  only:
     variables:
       - $DEPLOY_PLUGINS
  script:
    - rsync -rlv --ignore-existing build/OUTPUT/plugins/app/*.so $DEPLOY_SERVER:$UPLOAD_ROOT_PATH/$LINUX_PLATFORM/$APP_FOLDER/plugins/
